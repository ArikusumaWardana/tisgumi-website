// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Role for User
enum Role {
  admin
  superadmin
}

// Status for Product, Customer, and User
enum Status {
  active
  inactive
}

// Status for Order
enum OrderPaymentStatus {
  lunas
  belum_lunas
}

// Model for Users
model User {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(50)
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(100)
  phone      String    @db.VarChar(20)
  password   String    @db.VarChar(255)
  role       Role      @default(admin)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  sessions       Session[]
  orders_created Order[]   @relation("created_by_user_id")

  @@map("users")
}

// Model for Session
model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

// Model for Categories
model Categories {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(50)
  name       String    @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  Product Product[]

  @@map("categories")
}

// Model for Product
model Product {
  id            Int       @id @default(autoincrement())
  code          String    @unique @db.VarChar(50)
  name          String    @db.VarChar(100)
  default_price Int       @default(0) @db.Integer
  status        Status    @default(active)
  category_id   Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  category      Categories             @relation(fields: [category_id], references: [id], onDelete: Cascade)
  order_items   OrderItem[]
  custom_prices CustomProductPricing[]

  @@index([category_id])
  @@map("products")
}

// Model for Customer
model Customer {
  id         Int       @id @default(autoincrement())
  code       String    @unique @db.VarChar(50)
  name       String    @db.VarChar(100)
  phone      String    @db.VarChar(20)
  status     Status    @default(active)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  orders        Order[]
  custom_prices CustomProductPricing[]

  @@map("customers")
}

// Model for Orders
model Order {
  id                 Int                @id @default(autoincrement())
  code               String             @unique @db.VarChar(50)
  name               String             @db.VarChar(100)
  customer_id        Int
  created_by_user_id Int
  status             OrderPaymentStatus @default(lunas)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  deleted_at         DateTime?

  customer        Customer    @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  created_by_user User        @relation("created_by_user_id", fields: [created_by_user_id], references: [id])
  order_items     OrderItem[]
  invoices        Invoice[]

  @@index([customer_id])
  @@index([created_by_user_id])
  @@map("orders")
}

// Model for Invoice
model Invoice {
  id         Int      @id @default(autoincrement())
  order_id   Int
  file_url   String   @db.VarChar(255) // atau lokasi di Supabase bucket
  show_price Boolean  @default(true)
  created_at DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@map("invoices")
}

// Model for OrderItem
model OrderItem {
  id            Int       @id @default(autoincrement())
  code          String    @unique @db.VarChar(50)
  order_id      Int
  product_id    Int
  quantity      Int       @db.Integer
  price_at_time Int       @db.Integer
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([order_id])
  @@index([product_id])
  @@map("order_items")
}

// Model for CustomProductPricing
model CustomProductPricing {
  id           Int       @id @default(autoincrement())
  code         String    @unique @db.VarChar(50)
  customer_id  Int
  product_id   Int
  custom_price Int       @db.Integer
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([customer_id])
  @@index([product_id])
  @@map("custom_product_pricings")
}
